name: Importa ricette da URLs (FULL)

on:
  workflow_dispatch: {}
  schedule:
    - cron: "15 2 * * *"   # ogni giorno alle 02:15 UTC

permissions:
  contents: write

concurrency:
  group: import-urls-full
  cancel-in-progress: true

jobs:
  import:
    runs-on: ubuntu-latest
    env:
      YT_API_KEY: ${{ secrets.YT_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Sanity check
        run: |
          set -euxo pipefail
          node -v
          echo "::group::tree"
          ls -lah
          echo "::endgroup::"
          echo "::group::script/"
          ls -lah script || true
          echo "::endgroup::"
          echo "::group::assets/json/"
          ls -lah assets/json || true
          echo "::endgroup::"

      - name: Ensure urls.txt (fallback)
        run: |
          set -euo pipefail
          if [ ! -s urls.txt ]; then
            cat > urls.txt <<'EOF'
https://ricette.giallozafferano.it/Gnocchi-alla-sorrentina.html
https://ricette.giallozafferano.it/Pollo-alla-cacciatora.html
https://ricette.giallozafferano.it/Lasagne-alla-Bolognese.html
https://ricette.giallozafferano.it/Tiramisu.html
https://ricette.giallozafferano.it/Pesto-alla-genovese.html
https://ricette.giallozafferano.it/Minestrone-di-verdure.html
EOF
          fi
          echo "Prime 5 URL:" && head -n 5 urls.txt || true
          echo "Totale URL:" && wc -l urls.txt || true

      - name: Discover URLs (opzionale, non bloccante)
        continue-on-error: true
        run: |
          set -euo pipefail
          if [ -f script/discover-gz.mjs ]; then
            echo "Eseguo discover-gz.mjs"
            node script/discover-gz.mjs > new_urls.txt || true
            if [ -s new_urls.txt ]; then
              sort -u new_urls.txt > urls.txt
              rm -f new_urls.txt
            fi
          else
            echo "script/discover-gz.mjs non trovato → salto"
          fi
          echo "URL finali:" && wc -l urls.txt || true

      - name: Import batch (robusto, senza jq)
        run: |
          set -euo pipefail
          if [ -f script/import-recipes.mjs ]; then
            echo "Eseguo import…"
            node script/import-recipes.mjs urls.txt 30 > new_recipes.json || true
          else
            echo "Manca script/import-recipes.mjs → creo file vuoto"
            echo "[]" > new_recipes.json
          fi
          # Se non è JSON valido, correggo a [] con Node
          node -e "try{JSON.parse(require('fs').readFileSync('new_recipes.json','utf8'));}catch(e){require('fs').writeFileSync('new_recipes.json','[]')}"
          echo "Anteprima:"
          head -c 1000 new_recipes.json || true
          echo

      - name: Merge dataset (via Node, zero dipendenze)
        run: |
          set -euo pipefail
          mkdir -p assets/json
          if [ ! -f assets/json/recipes-it.json ]; then echo "[]" > assets/json/recipes-it.json; fi
          node <<'NODE'
          const fs = require('fs');
          const pathData = 'assets/json/recipes-it.json';
          const pathNew = 'new_recipes.json';

          function readJSON(p){ try { return JSON.parse(fs.readFileSync(p,'utf8')); } catch { return []; } }

          const data = readJSON(pathData);
          const add  = readJSON(pathNew);

          const toAdd = Array.isArray(add) ? add : [];
          if (!toAdd.length){
            console.log('Nessuna nuova ricetta, salto merge.');
            process.exit(0);
          }

          // Merge evitando duplicati per URL
          const seen = new Set(data.map(r => (r && r.url) || ''));
          for (const r of toAdd){
            const u = (r && r.url) || '';
            if (u && !seen.has(u)){ data.push(r); seen.add(u); }
          }

          fs.writeFileSync(pathData, JSON.stringify(data, null, 2));
          console.log('Totale dopo merge:', data.length);
          NODE

      - name: Commit & push se cambi
        run: |
          set -euo pipefail
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add -A
          if git diff --cached --quiet; then
            echo "Nessun cambiamento → nessun commit."
            exit 0
          fi
          # Conta elementi in new_recipes.json usando Node
          COUNT=$(node -e "try{console.log((JSON.parse(require('fs').readFileSync('new_recipes.json','utf8'))||[]).length||0)}catch(e){console.log(0)}")
          git commit -m "Import ricette automatico (+$COUNT)"
          git push

      - name: Upload artifact (new_recipes.json)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: new_recipes
          path: new_recipes.json
          if-no-files-found: warn
